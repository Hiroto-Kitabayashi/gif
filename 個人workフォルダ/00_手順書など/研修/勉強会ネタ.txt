☆メモリ使用量のお話☆
①通常、viewControllerはナビゲーションを用いて画面遷移する。その場合、戻るボタンを押すと表示されていた画面はviewごと削除される。

例)viewControllerをvc1、vc2、vc3とする。
vc1→vc2→（戻るボタンで遷移）vc1　と遷移すると…
内部に保持されているviewControllerはvc1のみになる。

ただし…
vc1→vc2→vc3→vc1と遷移すると
内部に保持されているviewControllerはvc1、vc2、vc3となる。

その場合、viewWillDisappear(確か)でview.removeFromParentViewとすればviewが全開放される。
※ただし、何故か分からないが、解放予定vcのviewDidLoadがDisappearの後に呼ばれるので気を付けること。

【要検証】だが、UITabBarで実装した画面遷移はvcを自動解放してくれる？


②UIScrollView（とその派生クラス）はメモリを著しく消費する。
どれくらいメモリが消費されるかというと…
（画面1枚分のメモリ）×（スクロールできる高さ全量）/（画面1枚分の高さ)
程度である。
そのため、大量データを表示させるには、画面をスクロールさせない工夫が必要である。
（因みに、UITableViewにはリユーズ機能が備わっており、セルを再利用することでメモリ消費を抑えている。ノリホは画面の再構築でバグってしまいましたが…）

対策としては、スクロールが発生するような画面ではページング機能を用いるのがベスト。


（③CollectionViewやTableViewのセルについて
StoryBoardで作成したセルをコードで呼び出す場合、tag付けが必要になる。）


④AppDelegateではいろんなことが出来る。
現時点で分かっていることは、
・全Controller共通の変数を保持することができる（グローバル変数）
・アプリケーション開始時の処理を記述することができる。
など。恐らく、アプリケーション終了時の処理とか、予期せぬエラー時の処理も記述できると思う。


⑤プルダウンの作り方
windowsFormでは標準提供されているプルダウンだが、iOSアプリでは提供されていない。
そのため、テキストフィールドにボタンを張り付けて、リンク先を別Controllerにするという、とても面倒な作業が必要となる。
データは呼び出し元で用意し、テキストへの入力はプルダウンでやるとよい。
つまり、呼び出し元からプルダウンに渡すものは
・データ
・テキストフィールドのインスタンス情報
の2つになる。


⑥メニューバーについて
機能別のコントローラ全ての親クラスとして生成する（MenuBarクラスでUIViewControllerを継承していれば問題ない）
※※リンクがうまくいかない問題が発生したが、解決策を忘れたため別途調査。※※



⑦複雑なレイアウトセルについて
UICollectionViewで1つのセルを細かく区切ることはあまりお勧めしない。
時間がかかっても、区切りを1pxの細いUIViewで区切り、データをXY相対指定したほうがメモリ消費を抑えることができる。



⑧Realmの使い方について
UITableViewを用いたデータ管理。あとでよく調べる（今後の開発で間違いなく使われる）


⑨




